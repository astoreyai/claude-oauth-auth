name: Documentation Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  docs-check:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"
          pip install linkchecker

      - name: Build documentation
        id: build-docs
        run: |
          echo "## Documentation Build" >> $GITHUB_STEP_SUMMARY
          cd docs
          mkdocs build --strict || {
            echo "❌ Documentation build failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          }
          echo "✅ Documentation built successfully" >> $GITHUB_STEP_SUMMARY

      - name: Check for broken links in docs
        id: check-links
        run: |
          echo "## Link Checking" >> $GITHUB_STEP_SUMMARY

          # Check markdown files for broken links
          python << 'EOF'
          import re
          import os
          from pathlib import Path
          from urllib.parse import urlparse

          errors = []
          warnings = []

          # Find all markdown files
          for md_file in Path('.').rglob('*.md'):
              if '.venv' in str(md_file) or 'site-packages' in str(md_file):
                  continue

              content = md_file.read_text()

              # Find markdown links [text](url)
              links = re.findall(r'\[([^\]]+)\]\(([^\)]+)\)', content)

              for text, url in links:
                  # Skip anchors
                  if url.startswith('#'):
                      continue

                  # Check local file links
                  if not url.startswith('http'):
                      # Resolve relative path
                      link_path = (md_file.parent / url).resolve()

                      # Remove anchor if present
                      if '#' in url:
                          link_path = (md_file.parent / url.split('#')[0]).resolve()

                      if not link_path.exists():
                          errors.append(f"{md_file}: Broken link to {url}")

                  # Warn about http (not https) links
                  if url.startswith('http://') and 'localhost' not in url:
                      warnings.append(f"{md_file}: Insecure link (http): {url}")

          if errors:
              print("Broken links found:")
              for error in errors:
                  print(f"  - {error}")
              exit(1)

          if warnings:
              print("Warnings:")
              for warning in warnings:
                  print(f"  - {warning}")

          print("✅ No broken links found")
          EOF

      - name: Validate code examples
        id: validate-examples
        run: |
          echo "## Code Example Validation" >> $GITHUB_STEP_SUMMARY

          # Extract and validate Python code blocks from markdown files
          python << 'EOF'
          import re
          import ast
          import sys
          from pathlib import Path

          errors = []

          for md_file in Path('.').rglob('*.md'):
              if '.venv' in str(md_file) or 'site-packages' in str(md_file):
                  continue

              content = md_file.read_text()

              # Find Python code blocks
              python_blocks = re.findall(r'```python\n(.*?)\n```', content, re.DOTALL)

              for i, code in enumerate(python_blocks):
                  try:
                      # Skip if it's incomplete example (has ...)
                      if '...' in code:
                          continue

                      # Try to parse the code
                      ast.parse(code)
                  except SyntaxError as e:
                      errors.append(f"{md_file} (block {i+1}): Syntax error: {e}")

          if errors:
              print("Invalid Python code examples found:")
              for error in errors:
                  print(f"  - {error}")
              sys.exit(1)

          print("✅ All code examples are valid")
          EOF

          echo "✅ Code examples validated" >> $GITHUB_STEP_SUMMARY

      - name: Check documentation coverage
        id: doc-coverage
        run: |
          echo "## Documentation Coverage" >> $GITHUB_STEP_SUMMARY

          # Check that all public modules/functions have docstrings
          python << 'EOF'
          import ast
          import sys
          from pathlib import Path

          missing_docs = []

          for py_file in Path('src').rglob('*.py'):
              if '__pycache__' in str(py_file):
                  continue

              try:
                  content = py_file.read_text()
                  tree = ast.parse(content)

                  for node in ast.walk(tree):
                      # Check classes
                      if isinstance(node, ast.ClassDef):
                          if not node.name.startswith('_'):
                              if not ast.get_docstring(node):
                                  missing_docs.append(f"{py_file}: Class {node.name} missing docstring")

                      # Check functions
                      if isinstance(node, ast.FunctionDef):
                          if not node.name.startswith('_'):
                              if not ast.get_docstring(node):
                                  missing_docs.append(f"{py_file}: Function {node.name} missing docstring")

              except Exception as e:
                  print(f"Warning: Could not parse {py_file}: {e}")

          if missing_docs:
              print("Missing docstrings:")
              for doc in missing_docs[:10]:  # Show first 10
                  print(f"  - {doc}")
              if len(missing_docs) > 10:
                  print(f"  ... and {len(missing_docs) - 10} more")
              # Don't fail, just warn
              print("\n⚠️  Some docstrings are missing (warning only)")
          else:
              print("✅ All public APIs have docstrings")
          EOF

          echo "✅ Documentation coverage checked" >> $GITHUB_STEP_SUMMARY

      - name: Generate docs report
        if: always()
        run: |
          echo "# Documentation Check Summary" > docs-report.md
          echo "" >> docs-report.md
          echo "## Results" >> docs-report.md
          echo "" >> docs-report.md
          echo "| Check | Status |" >> docs-report.md
          echo "|-------|--------|" >> docs-report.md
          echo "| Documentation Build | ${{ steps.build-docs.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |" >> docs-report.md
          echo "| Link Checking | ${{ steps.check-links.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |" >> docs-report.md
          echo "| Code Examples | ${{ steps.validate-examples.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |" >> docs-report.md
          echo "| Documentation Coverage | ${{ steps.doc-coverage.outcome == 'success' && '✅ Passed' || '⚠️  Warnings' }} |" >> docs-report.md

      - name: Upload docs report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-report
          path: docs-report.md
          retention-days: 30

      - name: Upload built docs
        if: steps.build-docs.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: built-docs
          path: docs/site/
          retention-days: 30

      - name: Fail if critical checks failed
        if: |
          steps.build-docs.outcome != 'success' ||
          steps.check-links.outcome != 'success' ||
          steps.validate-examples.outcome != 'success'
        run: |
          echo "One or more critical documentation checks failed!"
          exit 1
