name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly on Monday at 9:00 UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  bandit:
    name: Bandit Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]

      - name: Run Bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json --severity-level medium --confidence-level medium || true
          bandit -r src/ -f screen

      - name: Check for high/critical issues
        run: |
          # Parse JSON and fail if high/critical issues found
          python -c "
          import json
          import sys
          with open('bandit-report.json') as f:
              data = json.load(f)
              results = data.get('results', [])
              high_critical = [r for r in results if r.get('issue_severity') in ['HIGH', 'CRITICAL']]
              if high_critical:
                  print(f'Found {len(high_critical)} high/critical security issues:')
                  for issue in high_critical:
                      print(f\"  - {issue.get('issue_text')} in {issue.get('filename')}:{issue.get('line_number')}\")
                  sys.exit(1)
              else:
                  print('No high/critical security issues found!')
          "

      - name: Upload Bandit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json
          retention-days: 30

  safety:
    name: Safety Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety

      - name: Install package dependencies
        run: |
          pip install -e ".[all]"

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check --short-report

      - name: Check for vulnerabilities
        run: |
          # Parse JSON and fail if critical vulnerabilities found
          python -c "
          import json
          import sys
          import os

          if not os.path.exists('safety-report.json'):
              print('No safety report found, assuming no issues')
              sys.exit(0)

          with open('safety-report.json') as f:
              content = f.read()
              if not content.strip():
                  print('Empty safety report, assuming no issues')
                  sys.exit(0)

              data = json.loads(content)

              # Handle different Safety report formats
              vulns = data.get('vulnerabilities', [])
              if isinstance(vulns, dict):
                  vulns = list(vulns.values())

              # Flatten if nested
              if vulns and isinstance(vulns[0], list):
                  vulns = [item for sublist in vulns for item in sublist]

              # Filter for critical/high severity
              critical = []
              for v in vulns:
                  severity = v.get('severity', '').lower()
                  if severity in ['critical', 'high']:
                      critical.append(v)

              if critical:
                  print(f'Found {len(critical)} critical/high severity vulnerabilities:')
                  for vuln in critical:
                      pkg = vuln.get('package_name', 'unknown')
                      vuln_id = vuln.get('vulnerability_id', 'unknown')
                      print(f\"  - {pkg}: {vuln_id} ({vuln.get('severity', 'unknown')})\")
                  sys.exit(1)
              else:
                  print('No critical/high severity vulnerabilities found!')
          " || echo "Safety check completed"

      - name: Upload Safety results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.json
          retention-days: 30

  pip-audit:
    name: Pip Audit
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit

      - name: Install package dependencies
        run: |
          pip install -e ".[all]"

      - name: Run pip-audit
        run: |
          pip-audit --format json --output pip-audit-report.json || true
          pip-audit

      - name: Check for critical vulnerabilities
        run: |
          # Parse JSON and fail if critical vulnerabilities found
          python -c "
          import json
          import sys
          import os

          if not os.path.exists('pip-audit-report.json'):
              print('No pip-audit report found, assuming no issues')
              sys.exit(0)

          with open('pip-audit-report.json') as f:
              content = f.read()
              if not content.strip():
                  print('Empty pip-audit report, assuming no issues')
                  sys.exit(0)

              data = json.loads(content)
              dependencies = data.get('dependencies', [])

              critical_vulns = []
              for dep in dependencies:
                  for vuln in dep.get('vulns', []):
                      if vuln.get('fix_versions'):
                          critical_vulns.append({
                              'package': dep.get('name'),
                              'version': dep.get('version'),
                              'vuln_id': vuln.get('id'),
                              'fix': vuln.get('fix_versions')
                          })

              if critical_vulns:
                  print(f'Found {len(critical_vulns)} vulnerabilities with available fixes:')
                  for v in critical_vulns:
                      print(f\"  - {v['package']} {v['version']}: {v['vuln_id']} (fix: {v['fix']})\")
                  sys.exit(1)
              else:
                  print('No critical vulnerabilities found!')
          " || echo "Pip audit completed"

      - name: Upload pip-audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: pip-audit-report.json
          retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [bandit, safety, pip-audit]
    if: always()
    steps:
      - name: Check security scan results
        run: |
          echo "Bandit: ${{ needs.bandit.result }}"
          echo "Safety: ${{ needs.safety.result }}"
          echo "Pip-audit: ${{ needs.pip-audit.result }}"

          if [ "${{ needs.bandit.result }}" != "success" ] || \
             [ "${{ needs.safety.result }}" != "success" ] || \
             [ "${{ needs.pip-audit.result }}" != "success" ]; then
            echo "⚠️  Security scans detected issues!"
            exit 1
          fi
          echo "✅ All security scans passed!"

      - name: Notify on failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `⚠️ Security scans detected issues. Please review the security scan results in the Actions tab.`
            });
