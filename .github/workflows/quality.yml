name: Quality Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Ruff linting
        id: ruff-lint
        run: |
          echo "## Ruff Linting" >> $GITHUB_STEP_SUMMARY
          ruff check src tests --output-format=github || {
            echo "❌ Linting failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          }
          echo "✅ Linting passed" >> $GITHUB_STEP_SUMMARY

      - name: Run Ruff formatting check
        id: ruff-format
        run: |
          echo "## Ruff Formatting" >> $GITHUB_STEP_SUMMARY
          ruff format --check src tests || {
            echo "❌ Formatting check failed" >> $GITHUB_STEP_SUMMARY
            echo "Run 'ruff format src tests' to fix formatting" >> $GITHUB_STEP_SUMMARY
            exit 1
          }
          echo "✅ Formatting check passed" >> $GITHUB_STEP_SUMMARY

      - name: Run mypy type checking
        id: mypy
        run: |
          echo "## MyPy Type Checking" >> $GITHUB_STEP_SUMMARY
          mypy src || {
            echo "❌ Type checking failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          }
          echo "✅ Type checking passed" >> $GITHUB_STEP_SUMMARY

      - name: Run tests with coverage
        id: tests
        run: |
          echo "## Test Coverage" >> $GITHUB_STEP_SUMMARY
          pytest --cov=claude_oauth_auth --cov-report=term --cov-report=html --cov-report=json -v
          COVERAGE=$(python -c "import json; print(json.load(open('coverage.json'))['totals']['percent_covered'])")
          echo "Coverage: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          if (( $(echo "$COVERAGE < 95" | bc -l) )); then
            echo "❌ Coverage below 95% threshold: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "✅ Coverage passed: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY

      - name: Run Bandit security scan
        id: bandit
        run: |
          echo "## Bandit Security Scan" >> $GITHUB_STEP_SUMMARY
          bandit -r src/ -f screen || {
            echo "❌ Security scan found issues" >> $GITHUB_STEP_SUMMARY
            exit 1
          }
          echo "✅ Security scan passed" >> $GITHUB_STEP_SUMMARY

      - name: Generate quality report
        if: always()
        run: |
          echo "# Quality Check Summary" > quality-report.md
          echo "" >> quality-report.md
          echo "## Results" >> quality-report.md
          echo "" >> quality-report.md
          echo "| Check | Status |" >> quality-report.md
          echo "|-------|--------|" >> quality-report.md
          echo "| Ruff Linting | ${{ steps.ruff-lint.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |" >> quality-report.md
          echo "| Ruff Formatting | ${{ steps.ruff-format.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |" >> quality-report.md
          echo "| MyPy Type Checking | ${{ steps.mypy.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |" >> quality-report.md
          echo "| Test Coverage | ${{ steps.tests.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |" >> quality-report.md
          echo "| Bandit Security | ${{ steps.bandit.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |" >> quality-report.md
          cat quality-report.md

      - name: Upload quality report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.md
          retention-days: 30

      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-report.md', 'utf8');

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Quality Check Summary')
            );

            const commentBody = report + '\n\n---\n*Updated at: ' + new Date().toISOString() + '*';

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      - name: Fail if any check failed
        if: |
          steps.ruff-lint.outcome != 'success' ||
          steps.ruff-format.outcome != 'success' ||
          steps.mypy.outcome != 'success' ||
          steps.tests.outcome != 'success' ||
          steps.bandit.outcome != 'success'
        run: |
          echo "One or more quality checks failed!"
          exit 1
