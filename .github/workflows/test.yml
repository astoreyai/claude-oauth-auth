name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} - ${{ matrix.deps }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        deps: ["latest"]
        include:
          # Test with minimum supported versions
          - python-version: "3.8"
            deps: "minimum"
          # Test with anthropic latest
          - python-version: "3.11"
            deps: "anthropic-latest"

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            requirements-dev.txt

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ matrix.deps }}-${{ hashFiles('pyproject.toml', 'requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ matrix.deps }}-
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install minimum dependencies
        if: matrix.deps == 'minimum'
        run: |
          python -m pip install --upgrade pip
          pip install anthropic==0.7.0
          pip install -e ".[dev]"

      - name: Install anthropic latest
        if: matrix.deps == 'anthropic-latest'
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade anthropic
          pip install -e ".[dev]"

      - name: Install latest dependencies
        if: matrix.deps == 'latest'
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests with coverage
        run: |
          pytest --cov=claude_oauth_auth --cov-report=xml --cov-report=term --cov-report=html -v

      - name: Check coverage threshold
        run: |
          coverage report --fail-under=95

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11' && matrix.deps == 'latest'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true

      - name: Upload coverage artifacts
        if: matrix.python-version == '3.11' && matrix.deps == 'latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            if (context.eventName === 'pull_request') {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚ùå Tests failed for Python ${{ matrix.python-version }} with ${{ matrix.deps }} dependencies. Please check the logs for details.`
              });
            }

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "Tests failed!"
            exit 1
          fi
          echo "All tests passed!"
