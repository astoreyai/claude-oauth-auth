name: Test PyPI Publishing

# Manual trigger only for testing
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.0)'
        required: true
        type: string

jobs:
  build-and-test-publish:
    name: Build and Test Publish to TestPyPI
    runs-on: ubuntu-latest

    # Optional: Use environment for extra protection
    # environment:
    #   name: test-release
    #   url: https://test.pypi.org/project/claude-oauth-auth/

    permissions:
      id-token: write  # IMPORTANT: for trusted publishing
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Verify version matches input
        run: |
          VERSION_IN_FILE=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          INPUT_VERSION="${{ inputs.version }}"
          echo "Version in pyproject.toml: $VERSION_IN_FILE"
          echo "Input version: $INPUT_VERSION"
          if [ "$VERSION_IN_FILE" != "$INPUT_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "Please update version in pyproject.toml to $INPUT_VERSION"
            exit 1
          fi
          echo "✅ Version matches!"

      - name: Build distribution
        run: |
          python -m build
          echo "📦 Built packages:"
          ls -lh dist/

      - name: Check distribution
        run: |
          python -m twine check dist/*
          echo "✅ Distribution check passed!"

      - name: Show package contents
        run: |
          echo "📋 Wheel contents:"
          python -m zipfile -l dist/*.whl | head -20
          echo ""
          echo "📋 Source distribution contents:"
          tar -tzf dist/*.tar.gz | head -20

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true

      - name: Wait for package to be available
        run: |
          echo "⏳ Waiting 30 seconds for package to be available on TestPyPI..."
          sleep 30

      - name: Test installation from TestPyPI
        run: |
          echo "🧪 Testing installation from TestPyPI..."
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ claude-oauth-auth==${{ inputs.version }}
          echo "✅ Installation successful!"

      - name: Verify installed package
        run: |
          echo "🔍 Verifying package..."
          python -c "import claude_oauth_auth; print(f'Version: {claude_oauth_auth.__version__}')"
          python -c "from claude_oauth_auth import ClaudeClient; print('✅ ClaudeClient import successful')"
          python -c "from claude_oauth_auth import get_auth_status; print('✅ get_auth_status import successful')"
          echo "✅ All imports verified!"

      - name: Summary
        if: success()
        run: |
          echo "## ✅ Test Publishing Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**TestPyPI URL**: https://test.pypi.org/project/claude-oauth-auth/${{ inputs.version }}/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify package on TestPyPI" >> $GITHUB_STEP_SUMMARY
          echo "2. Test installation: \`pip install --index-url https://test.pypi.org/simple/ claude-oauth-auth\`" >> $GITHUB_STEP_SUMMARY
          echo "3. If everything looks good, create a release tag for production" >> $GITHUB_STEP_SUMMARY

      - name: Failure summary
        if: failure()
        run: |
          echo "## ❌ Test Publishing Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the logs above for details." >> $GITHUB_STEP_SUMMARY
          echo "Common issues:" >> $GITHUB_STEP_SUMMARY
          echo "- Version already exists on TestPyPI" >> $GITHUB_STEP_SUMMARY
          echo "- Trusted publishing not configured on TestPyPI" >> $GITHUB_STEP_SUMMARY
          echo "- Build errors or missing files" >> $GITHUB_STEP_SUMMARY
