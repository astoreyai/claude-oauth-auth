[build-system]
requires = ["setuptools>=61.0", "setuptools-scm>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name = "claude-oauth-auth"
version = "0.1.0"
description = "OAuth 2.0 authentication manager for Anthropic Claude API with unified credential discovery"
authors = [
    {name = "AI Scientist Project Contributors"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
keywords = [
    "anthropic",
    "claude",
    "oauth",
    "authentication",
    "claude-code",
    "ai"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
    "Typing :: Typed",
]

dependencies = [
    "anthropic>=0.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "tox>=4.0.0",
    "bandit[toml]>=1.7.0",
    "safety>=2.0.0",
    "pip-audit>=2.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]
benchmark = [
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.61.0",
    "psutil>=5.9.0",
]
all = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "tox>=4.0.0",
    "bandit[toml]>=1.7.0",
    "safety>=2.0.0",
    "pip-audit>=2.0.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.61.0",
    "psutil>=5.9.0",
]

[project.urls]
Homepage = "https://github.com/astoreyai/claude-oauth-auth"
Documentation = "https://github.com/astoreyai/claude-oauth-auth#readme"
Repository = "https://github.com/astoreyai/claude-oauth-auth"
Issues = "https://github.com/astoreyai/claude-oauth-auth/issues"
Changelog = "https://github.com/astoreyai/claude-oauth-auth/blob/main/CHANGELOG.md"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["claude_oauth_auth*"]
exclude = ["tests*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=claude_oauth_auth",
    "--cov-report=html",
    "--cov-report=term",
    "--cov-report=term-missing",
    "--cov-fail-under=95",
    "-v",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "asyncio: marks tests as async",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.ruff]
line-length = 100
target-version = "py38"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "F",     # pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "W",     # pycodestyle warnings
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
    "TID",   # flake8-tidy-imports
    "RUF",   # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip() without an explicit strict= parameter
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__ files
"tests/**/*.py" = ["S101"]  # Allow assert in tests

[tool.ruff.lint.isort]
known-first-party = ["claude_oauth_auth"]
force-single-line = false
lines-after-imports = 2

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
strict_optional = true
strict_equality = true
show_error_codes = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = "anthropic.*"
ignore_missing_imports = true

[tool.coverage.run]
source = ["claude_oauth_auth"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["/tests", "/.venv", "/.tox", "/build", "/dist"]
skips = ["B101"]  # Skip assert_used in tests (handled by per-file config)

[tool.bandit.assert_used]
skips = ["*/tests/*"]

[tool.tox]
legacy_tox_ini = """
[tox]
env_list = py38,py39,py310,py311,py312,lint,type
isolated_build = True

[testenv]
deps =
    pytest>=7.0.0
    pytest-cov>=4.0.0
    pytest-asyncio>=0.21.0
commands =
    pytest {posargs}

[testenv:lint]
deps =
    ruff>=0.1.0
commands =
    ruff check src tests
    ruff format --check src tests

[testenv:type]
deps =
    mypy>=1.0.0
commands =
    mypy src
"""
